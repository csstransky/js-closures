A config.js file will need to be included that follows this format:
const config = {
    apiKey : "API_KEY"
}

You can call a function as a constant variable, AND it must include a parenthesis or else it won't execute
what's inside of the function.

const report = updateClicks; // BAD, this will not print correctly
const report = updateClicks(); // GOOD, code in the function is now being executed

I think this has to do with the fact that you're saying that variables can be input into the function.


Interesting thing to note is that closures are independent of one another, so you can declare multiple "copies"
of closures without having to worry about reference.

// Both of these are different and not the same reference
let updateColors = updateClicks();
let updateTextures = updateClicks();


Modules:
- Encapsulate code
- Expose subset of properties and methods
- Protect values with private methods
- Avoids cluttering global namespace
- For all intents and purposes, think of this as an Object for OOD type stuff

Wrapping a function in () with a little () at the end is called an "IIFE" (Immediately-Invoked Function Expressions):
This means it's invoked immediately when the JS code is parsed
Example:
(function() { console.log("lol"); })();


Avoid unintended closures in for loops
+ let, const: create block scope within a loop
+ var: does NOT create block scope in loop
 for (var ii = 0; ii <= 9; ii++) { // This will stop at 10 and not do any counting
    setTimeout(function() {
      document.querySelector('.conditions').innerHTML = `<p class="animation">00:00.${ii}</p>`;
    }, 100 * ii);
  }
for (let ii = 0; ii <= 9; ii++) { // This will actually count from 0 to 9
  setTimeout(function() {
    document.querySelector('.conditions').innerHTML = `<p class="animation">00:00.${ii}</p>`;
  }, 100 * ii);
}